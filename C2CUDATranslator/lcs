    #include<stdio.h>
    #include<conio.h>
    #include<string.h>

     void print_lcs(char b[2][20],char x[2],int i,int j)
    {
		if(i==0 || j==0)
		{
		return ;
		}
		if(b[i][j]==c)
		{
			print_lcs(b,x,i-1,j-1);
			printf(" %c",x[i-1]);
		}
		else { if(b[i][j]==u)
		{
			print_lcs(b,x,i-1,j);
		}
		else
		{
			print_lcs(b,x,i,j-1);
		}}


    }
   
    int main(int argc , char *argv[] )
    {
		char ch;
		kernel char x[20];
		kernel char y[20];
		kernel int m;
		kernel int n;
		int i;
		int j;
		kernel int c[20];
		kernel char b[20];

		for(i = 0;i<=m;i++)
		{
			c[i][0]= 0;
		}
		for(i = 0;i<=n;i++)
		{
			c[0][i]= 0;
		}
		#pragma kernel_start
		for(i = 1;i<=m;i++)
		{
			for(j = 1;j<=n;j++)
			{
if(x[i-1]==y[j-1])
				{
					c[i][j]= c[i-1][j-1]+1;
					b[i][j]= c; //c stands for left upright cross
				}
				else { if(c[i-1][j]>=c[i][j-1])
				{
					c[i][j]= c[i-1][j];
					b[i][j]= u; //u stands for upright or above
				}
				else
				{
					c[i][j]= c[i][j-1];
					b[i][j]= l; //l stands for left
				}	}
			}
		}
		#pragma kernel_end
		printf("\nlcs are:");
		//print_lcs(b,x,m,n);
		//printf("\n Matrix is :: \n");

		for(i = 1;i<=m;i++)
		{
			for(j = 1;j<=n;j++)
			{
				printf(" %d ",c[i][j]);

			}
			printf("\n);
		}
		
		return 0;
    } 