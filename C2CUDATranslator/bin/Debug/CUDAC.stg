group CUDA;

program(globals,functions,kernelvars,includes,mainstats,functiondeclarations,ReadOnly,WriteOnly,size,funclist,pitchsats,rowaccessed,kernellocals) ::= <<
/*Parth C2CUDA Generated CODE */
<includes; separator="\n">
<functiondeclarations; separator="\n">
<functions; separator="\n">
<kernel_functions; separator="\n">
int main(int argc, char *argv[]) {
	<globals; separator="\n">	
	
	//Kernel Variables
	<kernelvars; separator="\n">
	
	//CUDA GRID BLOCK SIZE AND NUMBER OF BLOCKS
	int block_size = 32;
	const int N = <size>;  // Number of elements in arrays
	int n_blocks = N/block_size + (N%block_size == 0 ? 0:1);
	
	<mainstats; separator="\n">
	
}
>>
main(type,name) ::= ""
maint(type,name,extra) ::= ""
variable(type,name) ::= "<type> <name>;"
kernel_var(type,name) ::= "<type> <name>;<type> *g_<name>;"
kernel_local_var(type,name) ::= "<type> gpu_<name>;"
kernel_variable(type,name,id) ::= "<type> <name>;<type> *g_<id>;"
kernel_array(type,name,arr) ::= "<type> <name>;<type> *g_<arr>;"
kernel_array2D(type,name,arr) ::= "<type> <name>;<type> **g_<arr>;"
globalVariable ::= variable

function(type,name,args,locals,stats) ::= <<
<type> <name>(<args; separator=", ">) {
    <locals; separator="\n">
    <stats; separator="\n">
}
>>

kernel_function(type,name,args,locals,stats,index,pitchstats,kernellocals) ::= <<
__global__ <type> <name>(<args>) {
	 <kernellocals; separator="\n">
     <index>
     
     <pitchstats; separator="\n">
     
    <locals; separator="\n">
    <stats; separator="\n">
    __syncthreads();
}
>>

type(name) ::= "<name>"


type_int() ::= "int"
type_kernel_int() ::= "int"

type_char() ::= "char"
type_kernel_char() ::= "char"

type_float() ::= "float"
type_kernel_float() ::= "float"

type_bool() ::= "bool"
type_kernel_bool() ::= "bool"

type_kernel_Memalloc() ::= ""

type_user_object(name) ::= "<name>"
type_kernel_object(name) ::= "<name>;"

include(type,name) ::= "<type> <name>"

define(type,name,val) ::= "<type> <name> <val>"

parameter(type,name) ::= "<type> <name>"
printfpara(name) ::= ",<name>"

statement(expr) ::= "<expr>;"

statementList(locals,stats) ::= <<
{
    <locals; separator="\n">
    <stats; separator="\n">
}<\n>
>>

forLoop(e1,e2,e3,locals,stats) ::= <<
for (<e1> <e2>; <e3>) {
    <locals; separator="\n">
     <stats; separator="\n">
}
>>

whileLoop(e1,locals,stats) ::= <<
while (<e1>) {
    <locals; separator="\n">
     <stats; separator="\n">
}
>>

RemoveforLoop(e1,e2,e3,locals,stats,index) ::= <<
  int <index>=idx;
    <locals; separator="\n">
     <stats; separator="\n">
>>

RemoveChildforLoop(e1,e2,e3,locals,stats,index) ::= <<
  int <index>=idy;
    <locals; separator="\n">
     <stats; separator="\n">
>>

kforLoop(e1,e2,e3,locals,stats) ::= <<
for (int <e1> <e2>; <e3>) {
    <locals; separator="\n">
     <stats; separator="\n">
}
>>



assign(lhs,rhs) ::= "<lhs> = <rhs>;"
assignop(lhs,rhs,op) ::= "<lhs> <op> <rhs>;"

equals(left,right) ::= "<left> == <right>"
notequals(left,right) ::= "<left> != <right>"
lessThan(left,right) ::= "<left> \< <right>"
GreaterThan(left,right) ::= "<left> \> <right>"
lessThanEq(left,right) ::= "<left> \<= <right>"
GreaterThanEq(left,right) ::= "<left> \>= <right>"
CAND(left,right) ::= "(<left>) && (<right>)"
COR(left,right) ::= "(<left>) || (<right>)"

add(left,right) ::= "<left> + <right>"
Sub(left,right) ::= "<left> - <right>"
Div(left,right) ::= "<left> \/ <right>"
Mul(left,right) ::= "<left> * <right>"
Mod(left,right) ::= "<left> % <right>"

refVar(id) ::= "<id>"
iconst(value) ::= "<value>"
refarr(id,value) ::= "<value>"